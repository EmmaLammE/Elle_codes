function [SVM,VarName22,VarName23,VarName24,VarName25,VarName26,VarName27,VarName28,VarName29,VarName30,VarName31,VarName32,VarName33,VarName34,VarName35,VarName36,VarName37,VarName38,VarName39,VarName40] = import_alloutdata(filename, startRow, endRow)
%IMPORTFILE1 Import numeric data from a text file as column vectors.
%   [SVM,VARNAME22,VARNAME23,VARNAME24,VARNAME25,VARNAME26,VARNAME27,VARNAME28,VARNAME29,VARNAME30,VARNAME31,VARNAME32,VARNAME33,VARNAME34,VARNAME35,VARNAME36,VARNAME37,VARNAME38,VARNAME39,VARNAME40]
%   = IMPORTFILE1(FILENAME) Reads data from text file FILENAME for the
%   default selection.
%
%   [SVM,VARNAME22,VARNAME23,VARNAME24,VARNAME25,VARNAME26,VARNAME27,VARNAME28,VARNAME29,VARNAME30,VARNAME31,VARNAME32,VARNAME33,VARNAME34,VARNAME35,VARNAME36,VARNAME37,VARNAME38,VARNAME39,VARNAME40]
%   = IMPORTFILE1(FILENAME, STARTROW, ENDROW) Reads data from rows STARTROW
%   through ENDROW of text file FILENAME.
%
% Example:
%   [SVM,VarName22,VarName23,VarName24,VarName25,VarName26,VarName27,VarName28,VarName29,VarName30,VarName31,VarName32,VarName33,VarName34,VarName35,VarName36,VarName37,VarName38,VarName39,VarName40]
%   = importfile1('fraction00rate10_newgrid_AllOutData.txt',1, 79);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2015/10/01 13:48:04

%% Initialize variables.
delimiter = ' ';
if nargin<=2
    startRow = 1;
    endRow = inf;
end

%% Format string for each line of text:
%   column21: double (%f)
%	column22: double (%f)
%   column23: double (%f)
%	column24: double (%f)
%   column25: double (%f)
%	column26: double (%f)
%   column27: double (%f)
%	column28: double (%f)
%   column29: double (%f)
%	column30: double (%f)
%   column31: double (%f)
%	column32: double (%f)
%   column33: double (%f)
%	column34: double (%f)
%   column35: double (%f)
%	column36: double (%f)
%   column37: double (%f)
%	column38: double (%f)
%   column39: double (%f)
%	column40: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false);
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false);
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Allocate imported array to column variable names
SVM = dataArray{:, 1};
VarName22 = dataArray{:, 2};
VarName23 = dataArray{:, 3};
VarName24 = dataArray{:, 4};
VarName25 = dataArray{:, 5};
VarName26 = dataArray{:, 6};
VarName27 = dataArray{:, 7};
VarName28 = dataArray{:, 8};
VarName29 = dataArray{:, 9};
VarName30 = dataArray{:, 10};
VarName31 = dataArray{:, 11};
VarName32 = dataArray{:, 12};
VarName33 = dataArray{:, 13};
VarName34 = dataArray{:, 14};
VarName35 = dataArray{:, 15};
VarName36 = dataArray{:, 16};
VarName37 = dataArray{:, 17};
VarName38 = dataArray{:, 18};
VarName39 = dataArray{:, 19};
VarName40 = dataArray{:, 20};


